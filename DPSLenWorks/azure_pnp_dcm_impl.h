/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.8.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: 05/04/2020
 ***********************************************************************************************/

#ifndef AZURE_PNP_DCM_IMPL
#define AZURE_PNP_DCM_IMPL

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "azure_c_shared_utility/xlogging.h"
#include "azure_c_shared_utility/threadapi.h"
#include "parson.h"

/**
* Type definition
*/

/**
* @brief Result of DigitalTwin command execution.
*/
typedef enum DIGITALTWIN_COMMAND_RESULT_TAG
{
    DIGITALTWIN_COMMAND_OK,
    DIGITALTWIN_COMMAND_TIMEOUT,
    DIGITALTWIN_COMMAND_ERROR
} DIGITALTWIN_COMMAND_RESULT;

typedef struct LENWORKS_INTERFACE_A_MAGNETOMETER_TAG
{
    int x;

    int y;

    int z;

} LENWORKS_INTERFACE_A_MAGNETOMETER;

typedef struct LENWORKS_INTERFACE_A_BLINK_blinkResponse_TAG
{
    char* description;

} LENWORKS_INTERFACE_A_BLINK_blinkResponse;

/**
* Device telemetries related methods.
*/

double Lenworks_interface_a_Telemetry_ReadTemperature();

void Lenworks_interface_a_Telemetry_ReadMagnetometer(LENWORKS_INTERFACE_A_MAGNETOMETER * magnetometer);

/**
* Device properties related methods.
*/

char* Lenworks_interface_a_Property_GetName();

bool Lenworks_interface_a_Property_FanSpeedCallback(double fanSpeed);

char* DeviceInfo_Property_GetManufacturer();

char* DeviceInfo_Property_GetModel();

char* DeviceInfo_Property_GetSwVersion();

char* DeviceInfo_Property_GetOsName();

char* DeviceInfo_Property_GetProcessorArchitecture();

char* DeviceInfo_Property_GetProcessorManufacturer();

long DeviceInfo_Property_GetTotalStorage();

long DeviceInfo_Property_GetTotalMemory();

/**
* Device commands related methods.
*/

DIGITALTWIN_COMMAND_RESULT Lenworks_interface_a_Command_Blink(long interval, LENWORKS_INTERFACE_A_BLINK_blinkResponse* response, unsigned int* statusCode);

// Callbacks to handle the confirmation result of sending telemetry
void SendTelemetry_Succeeded_Callback(const char* interfaceName);
void SendTelemetry_Error_Callback(const char* interfaceName);

// Callbacks to handle the confirmation result of reporting property
void ReportProperty_Succeeded_Callback(const char* interfaceName, const char* propertyName);
void ReportProperty_Error_Callback(const char* interfaceName, const char* propertyName);

#ifdef __cplusplus
}
#endif

#endif // AZURE_PNP_DCM_IMPL
